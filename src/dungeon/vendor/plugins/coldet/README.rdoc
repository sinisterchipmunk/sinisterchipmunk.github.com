== jax-coldet

A fast collision detection library for the {Jax}[http://github.com/sinisterchipmunk/jax] WebGL framework.

=== About

This library uses a combination of BSP trees, bounding boxes and the built-in +Jax.Geometry.Triangle+ to perform collision detection using an arbitrary mesh. Objects don't have to use the same mesh for collision as they do for rendering; they can use a completely separate mesh (for instance, a specially-tailored collision mesh with fewer vertices or a different shape) for collision testing.

=== Usage

Usage is relatively simple, though it will be further streamlined in the future.

This example constructs two Sphere models, each with their own collision-detecting BSP, and uses a single mesh for both rendering and colliding:

  var sphere = new Jax.Mesh.Sphere();
  
  this.ball1 = new Jax.Model({ mesh:sphere });
  this.ball2 = new Jax.Model({ mesh:sphere, position:[0,5,0] });
  
  this.ball1.bsp = new BSP();
  this.ball2.bsp = new BSP();
  
  this.ball1.bsp.addMesh(sphere);
  this.ball2.bsp.addMesh(sphere);
  
  this.ball1.bsp.finalize();
  this.ball2.bsp.finalize();
  
  this.world.addObject(this.ball1);
  this.world.addObject(this.ball2);


Once the BSPs have been created, you can check for collisions like so:

  // matrix used to transform from ball2's object space into ball1's object space
  var mat = mat4.inverse(this.ball1.camera.getTransformationMatrix(), mat4.create());
  mat4.multiply(mat, this.ball2.camera.getTransformationMatrix(), mat);
  
  if (this.ball1.bsp.collide(this.ball2.bsp, mat)) {
    // collision! turn both balls red
    this.ball1.mesh.setColor(1,0,0,1);
    this.ball2.mesh.setColor(1,0,0,1);
  } else {
    // no collision, turn them white
    this.ball1.mesh.setColor(1,1,1,1);
    this.ball2.mesh.setColor(1,1,1,1);
  }

