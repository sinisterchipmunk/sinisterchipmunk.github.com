<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta content="text/html;charset=UTF-8" http-equiv="Content-Type"/>
  <title>Jax test suite</title>
  <% css_files.each do |css_file| %>
  <link rel="stylesheet" href="<%= css_file %>" type="text/css" media="screen"/>
  <% end %>

  <% jasmine_files.each do |jasmine_file| %>
  <script src="<%= jasmine_file %>" type="text/javascript"></script>
  <% end %>

  <script type="text/javascript">
    var jsApiReporter;
    (function() {
      window.onload = function() {
        // setupJaxTestEnvironment();
        
        /*
          Create a canvas element and add it to the document. 
          There's nothing special about this element.
         */
        var canvas = document.createElement("canvas");
        canvas.setAttribute("id", "webgl-canvas");
        canvas.setAttribute("width", "750");
        canvas.setAttribute("height", "540");
        document.body.appendChild(canvas);
        
        /*
          Instantiate a Jax context.
          Note that you can have more than one, though you usually won't need to do so.
          Each context should be initialized with its own canvas element.
         */
        window.context = new Jax.Context(canvas);
        
        /*
          That's all there is to initializing a Jax context, if you have a root route.
          If not, you'll need to point it at a Jax controller manually:
         */
        // context.redirect_to("controller_name/action_name");
        
        /* Set up framerate monitoring */
        function updateFramerateMessage() {
          document.getElementById('jax_fps').innerHTML = parseInt(context.getFramesPerSecond());
          document.getElementById('jax_ups').innerHTML = parseInt(context.getUpdatesPerSecond());
        }
        window.context.afterUpdate(function() { if (document.show_framerate) updateFramerateMessage(); });
      };
    })();
    
    /*
      helpers for the framerate links. Updating the DIV with framerates incurs a performance
      hit, so it's disabled by default; enable it when you need it, leave it when you don't.
    */
    function showFramerate() {
      document.show_framerate = true;
      document.getElementById('jax_fpsups').style.display = 'inline';
      document.getElementById('jax_showfps').style.display = "none";
    }
    
    function hideFramerate() {
      document.show_Framerate = false;
      context.disableFrameSpeedCalculations();
      context.disableUpdateSpeedCalculations();
      document.getElementById('jax_fpsups').style.display = "none";
      document.getElementById('jax_showfps').style.display = "inline";
    }
  </script>
  
  <% js_files.each do |js_file| %>
  <script src="<%= js_file %>" type="text/javascript"></script>
  <% end %>

  <style type="text/css">
    canvas { border:1px solid #000; }
    #jax_banner {
      margin: 0.25em;
      padding: 0.5em;
      padding-left:1em;
      background-color: #fff0f0;
      font-size:14pt;
    }
    
    #jax_fpsups { display:none; }
    #jax_fps { display:inline; }
    #jax_ups { display:inline; }
  </style>
</head>
<body>
<div id="jax_banner">
  <!-- or we could use <%%=Jax::Version::STRING%> for the Rubygem version -->
  Jax v<script type="text/javascript">document.write(Jax.VERSION);</script>
  &rarr;
  <a href="#" id="jax_showfps" onclick="showFramerate();return false;">Show Framerate</a>
  <div id="jax_fpsups">
    Frames per second: <div id="jax_fps">(calculating...)</div>
    Updates per second: <div id="jax_ups">(calculating...)</div>
    <a href="#" onclick="hideFramerate();return false;">Hide Framerate</a>
  </div>
</div>
<div id="jasmine_content"></div>
</body>
</html>
